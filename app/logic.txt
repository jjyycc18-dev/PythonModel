#전역 변수 선언
excluded_nums = []

1. 338줄 "# 최종 추천 번호 결정"
excluded_nums.extend( [final_recommendation[i] for i in [0,1,2,3,4,5]] )

2. 544줄 "상위 3개 세트를 우선 추천합니다!"
  global excluded_nums
  for s in final_7_sets:
    excluded_nums.extend( [s[i] for i in [0,2,3,4,5]] )

3."방법 1: 전체 빈도 분석"
  global excluded_nums
  excluded_nums.extend( [prediction1[i] for i in [2,3,4,5]] )

4."방법 2: 최근 빈도 분석"
  excluded_nums.extend( [prediction2[i] for i in [0,1,2,3,4,5]] )

5."방법 3: 균형 분석"
  excluded_nums.extend( [prediction3[i] for i in [0,1,2,3,4]] )

6."방법 4: 패턴 분석"
  excluded_nums.extend( [prediction4[i] for i in [0,2,3,4]] )

7."방법 5: AI 복합 분석"
  excluded_nums.extend( [prediction5[i] for i in [0,2,3,4,5]] )

8."방법 6: 당첨 간격 분석"
  excluded_nums.extend( [prediction6[i] for i in [0,1,2,3,4,5]] )

9. "수열 분석 결과 TOP 15:"
  if ..
        if i < 11:
            excluded_nums.extend(num[])

#jyc 맨 마지막에
  excluded_nums = list(set(excluded_nums))
  excluded_nums.sort()
  print(f"**예상 제외번호 : {excluded_nums}")

  nums = list(range(1,46))
  remain_nums = list(set(nums) - set(excluded_nums))
  remain_nums.sort()
  print(f"**예상 번호 : {remain_nums}")

# request : 
1. excluded_nums 에 있는 1~ 9까지 수에서 1개선택 (최근 마지막 추첨결과에서 1~ 9까지 수가 존재하고 , 그 숫자가 5보다 작으면 5이상 수를 선택하고 5보다 크면 5이하 수를 선택한다)
2. excluded_nums 에 있는 10~ 19까지 수에서 1개선택 (최근 마지막 추첨결과에서 10~ 19까지 수가  존재하고 , 그 숫자가 15보다 작으면 15이상에서 수를 선택하고 15보다 크면 15이하 수를 선택한다)
3. excluded_nums 에 있는 20~ 29까지 수에서 1개선택 (최근 마지막 추첨결과에서 21~ 29까지 수가  존재하고 , 그 숫자가 25보다 작으면 25이상에서 수를 선택하고 25보다 크면 25이하 수를 선택한다)
4. excluded_nums 에 있는 30~ 39까지 수에서 1개선택 (최근 마지막 추첨결과에서 31~ 39까지 수가  존재하고 , 그 숫자가 35보다 작으면 25이상에서 수를 선택하고 35보다 크면 35이하 수를 선택한다)
5. remain_nums 에 있는 1~ 9까지 수에서 1개선택 (최근 마지막 추첨결과에서 1~ 9까지 수가 존재하고 , 그 숫자가 5보다 작으면 5이상 수를 선택하고 5보다 크면 5이하 수를 선택한다)
6. remain_nums 에 있는 40~ 45까지 수에서 1개선택 (최근 마지막 추첨결과에서 40~ 45까지 수가  존재하고 , 그 숫자가 43보다 작으면 43이상에서 수를 선택하고 43보다 크면 43이하 수를 선택한다.
                                            최근 마지막 추첨결과에서 40~ 45까지 수가  존재하지 않으면,  43이상에서 수를 선택. )
이 RULE을 바탕으로 총 10 SETS 를 추첨해줘 (추첨결과는 중복이 없어야한다.) 































